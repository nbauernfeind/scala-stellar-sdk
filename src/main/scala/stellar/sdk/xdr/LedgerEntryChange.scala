// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union LedgerEntryChange switch (LedgerEntryChangeType type)
//  {
//  case LEDGER_ENTRY_CREATED:
//      LedgerEntry created;
//  case LEDGER_ENTRY_UPDATED:
//      LedgerEntry updated;
//  case LEDGER_ENTRY_REMOVED:
//      LedgerKey removed;
//  case LEDGER_ENTRY_STATE:
//      LedgerEntry state;
//  };

//  ===========================================================================

sealed trait LedgerEntryChange {
  def encode(stream: XdrDataOutputStream): Unit
}

object LedgerEntryChange {
  def decode(stream: XdrDataInputStream): LedgerEntryChange = LedgerEntryChangeType.decode(stream) match {
    case LedgerEntryChangeType.LEDGER_ENTRY_CREATED => LEDGER_ENTRY_CREATED(LedgerEntry.decode(stream))
    case LedgerEntryChangeType.LEDGER_ENTRY_UPDATED => LEDGER_ENTRY_UPDATED(LedgerEntry.decode(stream))
    case LedgerEntryChangeType.LEDGER_ENTRY_REMOVED => LEDGER_ENTRY_REMOVED(LedgerKey.decode(stream))
    case LedgerEntryChangeType.LEDGER_ENTRY_STATE => LEDGER_ENTRY_STATE(LedgerEntry.decode(stream))
    case d => throw new IllegalArgumentException(s"LedgerEntryChangeType value $d is invalid")
  }

  case class LEDGER_ENTRY_CREATED(x: LedgerEntry) extends LedgerEntryChange {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerEntryChangeType.LEDGER_ENTRY_CREATED.encode(stream)
      x.encode(stream)
    }
  }
  case class LEDGER_ENTRY_UPDATED(x: LedgerEntry) extends LedgerEntryChange {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerEntryChangeType.LEDGER_ENTRY_UPDATED.encode(stream)
      x.encode(stream)
    }
  }
  case class LEDGER_ENTRY_REMOVED(x: LedgerKey) extends LedgerEntryChange {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerEntryChangeType.LEDGER_ENTRY_REMOVED.encode(stream)
      x.encode(stream)
    }
  }
  case class LEDGER_ENTRY_STATE(x: LedgerEntry) extends LedgerEntryChange {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerEntryChangeType.LEDGER_ENTRY_STATE.encode(stream)
      x.encode(stream)
    }
  }
}
