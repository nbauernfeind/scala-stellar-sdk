// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct SetOptionsOp
//  {
//      AccountID* inflationDest; // sets the inflation destination
//  
//      uint32* clearFlags; // which flags to clear
//      uint32* setFlags;   // which flags to set
//  
//      // account threshold manipulation
//      uint32* masterWeight; // weight of the master account
//      uint32* lowThreshold;
//      uint32* medThreshold;
//      uint32* highThreshold;
//  
//      string32* homeDomain; // sets the home domain
//  
//      // Add, update or remove a signer for the account
//      // signer is deleted if the weight is 0
//      Signer* signer;
//  };

//  ===========================================================================

case class SetOptionsOp (
  inflationDest: Option[AccountID], 
  clearFlags: Option[Uint32], 
  setFlags: Option[Uint32], 
  masterWeight: Option[Uint32], 
  lowThreshold: Option[Uint32], 
  medThreshold: Option[Uint32], 
  highThreshold: Option[Uint32], 
  homeDomain: Option[String32], 
  signer: Option[Signer]
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    inflationDest match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    clearFlags match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    setFlags match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    masterWeight match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    lowThreshold match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    medThreshold match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    highThreshold match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    homeDomain match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    signer match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
  }
}

object SetOptionsOp {
  def decode(stream: XdrDataInputStream): SetOptionsOp = SetOptionsOp(
    if (stream.readInt == 0) None else Some(AccountID.decode(stream)),
    if (stream.readInt == 0) None else Some(Uint32.decode(stream)),
    if (stream.readInt == 0) None else Some(Uint32.decode(stream)),
    if (stream.readInt == 0) None else Some(Uint32.decode(stream)),
    if (stream.readInt == 0) None else Some(Uint32.decode(stream)),
    if (stream.readInt == 0) None else Some(Uint32.decode(stream)),
    if (stream.readInt == 0) None else Some(Uint32.decode(stream)),
    if (stream.readInt == 0) None else Some(String32.decode(stream)),
    if (stream.readInt == 0) None else Some(Signer.decode(stream))
  )
}
