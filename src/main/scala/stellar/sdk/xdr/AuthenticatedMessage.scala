// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union AuthenticatedMessage switch (uint32 v)
//  {
//  case 0:
//      struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      } v0;
//  };

//  ===========================================================================

sealed trait AuthenticatedMessage {
  def encode(stream: XdrDataOutputStream): Unit
}

object AuthenticatedMessage {
  def decode(stream: XdrDataInputStream): AuthenticatedMessage = Uint32.decode(stream) match {
    case Uint32(0) => R_0(V0.decode(stream))
    case d => throw new IllegalArgumentException(s"Uint32 value $d is invalid")
  }

  case class R_0(x: V0) extends AuthenticatedMessage {
    def encode(stream: XdrDataOutputStream): Unit = {
      Uint32(0).encode(stream)
      x.encode(stream)
    }
  }

  case class V0 (
    sequence: Uint64, 
    message: StellarMessage, 
    mac: HmacSha256Mac
  ) {
    def encode(stream: XdrDataOutputStream): Unit = {
      sequence.encode(stream)
      message.encode(stream)
      mac.encode(stream)
    }
  }

  object V0 {
    def decode(stream: XdrDataInputStream): V0 = V0(
      Uint64.decode(stream),
      StellarMessage.decode(stream),
      HmacSha256Mac.decode(stream)
    )
  }
}
