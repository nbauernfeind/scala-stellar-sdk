// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct AllowTrustOp
//  {
//      AccountID trustor;
//      union switch (AssetType type)
//      {
//      // ASSET_TYPE_NATIVE is not allowed
//      case ASSET_TYPE_CREDIT_ALPHANUM4:
//          opaque assetCode4[4];
//  
//      case ASSET_TYPE_CREDIT_ALPHANUM12:
//          opaque assetCode12[12];
//  
//          // add other asset types here in the future
//      }
//      asset;
//  
//      bool authorize;
//  };

//  ===========================================================================

case class AllowTrustOp (
  trustor: AccountID, 
  asset: AllowTrustOp.Asset, 
  authorize: Boolean
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    trustor.encode(stream)
    asset.encode(stream)
    stream.writeInt(if (authorize) 1 else 0)
  }
}

object AllowTrustOp {
  def decode(stream: XdrDataInputStream): AllowTrustOp = AllowTrustOp(
    AccountID.decode(stream),
    Asset.decode(stream),
    stream.readInt == 1
  )

  sealed trait Asset {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Asset {
    def decode(stream: XdrDataInputStream): Asset = AssetType.decode(stream) match {
      case AssetType.ASSET_TYPE_CREDIT_ALPHANUM4 => ASSET_TYPE_CREDIT_ALPHANUM4(stream.readBytes(4))
      case AssetType.ASSET_TYPE_CREDIT_ALPHANUM12 => ASSET_TYPE_CREDIT_ALPHANUM12(stream.readBytes(12))
      case d => throw new IllegalArgumentException(s"AssetType value $d is invalid")
    }

    case class ASSET_TYPE_CREDIT_ALPHANUM4(x: Array[Byte]) extends Asset {
      def encode(stream: XdrDataOutputStream): Unit = {
        AssetType.ASSET_TYPE_CREDIT_ALPHANUM4.encode(stream)
        stream.write(x, 0, x.length)
      }
    }
    case class ASSET_TYPE_CREDIT_ALPHANUM12(x: Array[Byte]) extends Asset {
      def encode(stream: XdrDataOutputStream): Unit = {
        AssetType.ASSET_TYPE_CREDIT_ALPHANUM12.encode(stream)
        stream.write(x, 0, x.length)
      }
    }
  }
}
