// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct PathPaymentOp
//  {
//      Asset sendAsset; // asset we pay with
//      int64 sendMax;   // the maximum amount of sendAsset to
//                       // send (excluding fees).
//                       // The operation will fail if can't be met
//  
//      AccountID destination; // recipient of the payment
//      Asset destAsset;       // what they end up with
//      int64 destAmount;      // amount they end up with
//  
//      Asset path<5>; // additional hops it must go through to get there
//  };

//  ===========================================================================

case class PathPaymentOp (
  sendAsset: Asset, 
  sendMax: Int64, 
  destination: AccountID, 
  destAsset: Asset, 
  destAmount: Int64, 
  path: Array[Asset]
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    sendAsset.encode(stream)
    sendMax.encode(stream)
    destination.encode(stream)
    destAsset.encode(stream)
    destAmount.encode(stream)
    stream.writeInt(path.length)
    path.foreach { _.encode(stream) }
  }
}

object PathPaymentOp {
  def decode(stream: XdrDataInputStream): PathPaymentOp = PathPaymentOp(
    Asset.decode(stream),
    Int64.decode(stream),
    AccountID.decode(stream),
    Asset.decode(stream),
    Int64.decode(stream),
    (0 until stream.readInt).map(_ => Asset.decode(stream)).toArray
  )
}
