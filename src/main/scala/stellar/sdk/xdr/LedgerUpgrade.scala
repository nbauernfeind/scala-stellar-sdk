// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union LedgerUpgrade switch (LedgerUpgradeType type)
//  {
//  case LEDGER_UPGRADE_VERSION:
//      uint32 newLedgerVersion; // update ledgerVersion
//  case LEDGER_UPGRADE_BASE_FEE:
//      uint32 newBaseFee; // update baseFee
//  case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
//      uint32 newMaxTxSetSize; // update maxTxSetSize
//  case LEDGER_UPGRADE_BASE_RESERVE:
//      uint32 newBaseReserve; // update baseReserve
//  };

//  ===========================================================================

sealed trait LedgerUpgrade {
  def encode(stream: XdrDataOutputStream): Unit
}

object LedgerUpgrade {
  def decode(stream: XdrDataInputStream): LedgerUpgrade = LedgerUpgradeType.decode(stream) match {
    case LedgerUpgradeType.LEDGER_UPGRADE_VERSION => LEDGER_UPGRADE_VERSION(Uint32.decode(stream))
    case LedgerUpgradeType.LEDGER_UPGRADE_BASE_FEE => LEDGER_UPGRADE_BASE_FEE(Uint32.decode(stream))
    case LedgerUpgradeType.LEDGER_UPGRADE_MAX_TX_SET_SIZE => LEDGER_UPGRADE_MAX_TX_SET_SIZE(Uint32.decode(stream))
    case LedgerUpgradeType.LEDGER_UPGRADE_BASE_RESERVE => LEDGER_UPGRADE_BASE_RESERVE(Uint32.decode(stream))
    case d => throw new IllegalArgumentException(s"LedgerUpgradeType value $d is invalid")
  }

  case class LEDGER_UPGRADE_VERSION(x: Uint32) extends LedgerUpgrade {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerUpgradeType.LEDGER_UPGRADE_VERSION.encode(stream)
      x.encode(stream)
    }
  }
  case class LEDGER_UPGRADE_BASE_FEE(x: Uint32) extends LedgerUpgrade {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerUpgradeType.LEDGER_UPGRADE_BASE_FEE.encode(stream)
      x.encode(stream)
    }
  }
  case class LEDGER_UPGRADE_MAX_TX_SET_SIZE(x: Uint32) extends LedgerUpgrade {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerUpgradeType.LEDGER_UPGRADE_MAX_TX_SET_SIZE.encode(stream)
      x.encode(stream)
    }
  }
  case class LEDGER_UPGRADE_BASE_RESERVE(x: Uint32) extends LedgerUpgrade {
    def encode(stream: XdrDataOutputStream): Unit = {
      LedgerUpgradeType.LEDGER_UPGRADE_BASE_RESERVE.encode(stream)
      x.encode(stream)
    }
  }
}
