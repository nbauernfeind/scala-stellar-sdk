// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct OfferEntry
//  {
//      AccountID sellerID;
//      uint64 offerID;
//      Asset selling; // A
//      Asset buying;  // B
//      int64 amount;  // amount of A
//  
//      /* price for this offer:
//          price of A in terms of B
//          price=AmountB/AmountA=priceNumerator/priceDenominator
//          price is after fees
//      */
//      Price price;
//      uint32 flags; // see OfferEntryFlags
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================

case class OfferEntry (
  sellerID: AccountID, 
  offerID: Uint64, 
  selling: Asset, 
  buying: Asset, 
  amount: Int64, 
  price: Price, 
  flags: Uint32, 
  ext: OfferEntry.Ext
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    sellerID.encode(stream)
    offerID.encode(stream)
    selling.encode(stream)
    buying.encode(stream)
    amount.encode(stream)
    price.encode(stream)
    flags.encode(stream)
    ext.encode(stream)
  }
}

object OfferEntry {
  def decode(stream: XdrDataInputStream): OfferEntry = OfferEntry(
    AccountID.decode(stream),
    Uint64.decode(stream),
    Asset.decode(stream),
    Asset.decode(stream),
    Int64.decode(stream),
    Price.decode(stream),
    Uint32.decode(stream),
    Ext.decode(stream)
  )

  sealed trait Ext {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ext {
    def decode(stream: XdrDataInputStream): Ext = stream.readInt match {
      case 0 => R_0
      case d => throw new IllegalArgumentException(s"Int value $d is invalid")
    }

    case object R_0 extends Ext {
      def encode(stream: XdrDataOutputStream): Unit = {
        stream.writeInt(0)
      }
    }
  }
}
