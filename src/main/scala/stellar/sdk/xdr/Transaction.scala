// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct Transaction
//  {
//      // account used to run the transaction
//      AccountID sourceAccount;
//  
//      // the fee the sourceAccount will pay
//      uint32 fee;
//  
//      // sequence number to consume in the account
//      SequenceNumber seqNum;
//  
//      // validity range (inclusive) for the last ledger close time
//      TimeBounds* timeBounds;
//  
//      Memo memo;
//  
//      Operation operations<100>;
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================

case class Transaction (
  sourceAccount: AccountID, 
  fee: Uint32, 
  seqNum: SequenceNumber, 
  timeBounds: Option[TimeBounds], 
  memo: Memo, 
  operations: Array[Operation], 
  ext: Transaction.Ext
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    sourceAccount.encode(stream)
    fee.encode(stream)
    seqNum.encode(stream)
    timeBounds match {
      case Some(x) => 
        stream.writeInt(1)
        x.encode(stream)
      case None => stream.writeInt(0)
    }
    memo.encode(stream)
    stream.writeInt(operations.length)
    operations.foreach { _.encode(stream) }
    ext.encode(stream)
  }
}

object Transaction {
  def decode(stream: XdrDataInputStream): Transaction = Transaction(
    AccountID.decode(stream),
    Uint32.decode(stream),
    SequenceNumber.decode(stream),
    if (stream.readInt == 0) None else Some(TimeBounds.decode(stream)),
    Memo.decode(stream),
    (0 until stream.readInt).map(_ => Operation.decode(stream)).toArray,
    Ext.decode(stream)
  )

  sealed trait Ext {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ext {
    def decode(stream: XdrDataInputStream): Ext = stream.readInt match {
      case 0 => R_0
      case d => throw new IllegalArgumentException(s"Int value $d is invalid")
    }

    case object R_0 extends Ext {
      def encode(stream: XdrDataOutputStream): Unit = {
        stream.writeInt(0)
      }
    }
  }
}
