// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union TransactionMeta switch (int v)
//  {
//  case 0:
//      OperationMeta operations<>;
//  case 1:
//      TransactionMetaV1 v1;
//  };

//  ===========================================================================

sealed trait TransactionMeta {
  def encode(stream: XdrDataOutputStream): Unit
}

object TransactionMeta {
  def decode(stream: XdrDataInputStream): TransactionMeta = stream.readInt match {
    case 0 => R_0((0 until stream.readInt).map(_ => OperationMeta.decode(stream)).toArray)
    case 1 => R_1(TransactionMetaV1.decode(stream))
    case d => throw new IllegalArgumentException(s"Int value $d is invalid")
  }

  case class R_0(x: Array[OperationMeta]) extends TransactionMeta {
    def encode(stream: XdrDataOutputStream): Unit = {
      stream.writeInt(0)
      stream.writeInt(x.length)
      x.foreach { _.encode(stream) }
    }
  }
  case class R_1(x: TransactionMetaV1) extends TransactionMeta {
    def encode(stream: XdrDataOutputStream): Unit = {
      stream.writeInt(1)
      x.encode(stream)
    }
  }
}
