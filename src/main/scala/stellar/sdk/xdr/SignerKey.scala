// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union SignerKey switch (SignerKeyType type)
//  {
//  case SIGNER_KEY_TYPE_ED25519:
//      uint256 ed25519;
//  case SIGNER_KEY_TYPE_PRE_AUTH_TX:
//      /* Hash of Transaction structure */
//      uint256 preAuthTx;
//  case SIGNER_KEY_TYPE_HASH_X:
//      /* Hash of random 256 bit preimage X */
//      uint256 hashX;
//  };

//  ===========================================================================

sealed trait SignerKey {
  def encode(stream: XdrDataOutputStream): Unit
}

object SignerKey {
  def decode(stream: XdrDataInputStream): SignerKey = SignerKeyType.decode(stream) match {
    case SignerKeyType.SIGNER_KEY_TYPE_ED25519 => SIGNER_KEY_TYPE_ED25519(Uint256.decode(stream))
    case SignerKeyType.SIGNER_KEY_TYPE_PRE_AUTH_TX => SIGNER_KEY_TYPE_PRE_AUTH_TX(Uint256.decode(stream))
    case SignerKeyType.SIGNER_KEY_TYPE_HASH_X => SIGNER_KEY_TYPE_HASH_X(Uint256.decode(stream))
    case d => throw new IllegalArgumentException(s"SignerKeyType value $d is invalid")
  }

  case class SIGNER_KEY_TYPE_ED25519(x: Uint256) extends SignerKey {
    def encode(stream: XdrDataOutputStream): Unit = {
      SignerKeyType.SIGNER_KEY_TYPE_ED25519.encode(stream)
      x.encode(stream)
    }
  }
  case class SIGNER_KEY_TYPE_PRE_AUTH_TX(x: Uint256) extends SignerKey {
    def encode(stream: XdrDataOutputStream): Unit = {
      SignerKeyType.SIGNER_KEY_TYPE_PRE_AUTH_TX.encode(stream)
      x.encode(stream)
    }
  }
  case class SIGNER_KEY_TYPE_HASH_X(x: Uint256) extends SignerKey {
    def encode(stream: XdrDataOutputStream): Unit = {
      SignerKeyType.SIGNER_KEY_TYPE_HASH_X.encode(stream)
      x.encode(stream)
    }
  }
}
