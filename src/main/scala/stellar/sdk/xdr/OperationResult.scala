// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union OperationResult switch (OperationResultCode code)
//  {
//  case opINNER:
//      union switch (OperationType type)
//      {
//      case CREATE_ACCOUNT:
//          CreateAccountResult createAccountResult;
//      case PAYMENT:
//          PaymentResult paymentResult;
//      case PATH_PAYMENT:
//          PathPaymentResult pathPaymentResult;
//      case MANAGE_OFFER:
//          ManageOfferResult manageOfferResult;
//      case CREATE_PASSIVE_OFFER:
//          ManageOfferResult createPassiveOfferResult;
//      case SET_OPTIONS:
//          SetOptionsResult setOptionsResult;
//      case CHANGE_TRUST:
//          ChangeTrustResult changeTrustResult;
//      case ALLOW_TRUST:
//          AllowTrustResult allowTrustResult;
//      case ACCOUNT_MERGE:
//          AccountMergeResult accountMergeResult;
//      case INFLATION:
//          InflationResult inflationResult;
//      case MANAGE_DATA:
//          ManageDataResult manageDataResult;
//      case BUMP_SEQUENCE:
//          BumpSequenceResult bumpSeqResult;
//      }
//      tr;
//  default:
//      void;
//  };

//  ===========================================================================

sealed trait OperationResult {
  def encode(stream: XdrDataOutputStream): Unit
}

object OperationResult {
  def decode(stream: XdrDataInputStream): OperationResult = OperationResultCode.decode(stream) match {
    case OperationResultCode.OpINNER => OpINNER(Tr.decode(stream))
    case d => Default(d)
  }

  case class OpINNER(x: Tr) extends OperationResult {
    def encode(stream: XdrDataOutputStream): Unit = {
      OperationResultCode.OpINNER.encode(stream)
      x.encode(stream)
    }
  }
  case class Default(d: OperationResultCode) extends OperationResult {
    def encode(stream: XdrDataOutputStream): Unit = {
      d.encode(stream)
    }
  }

  sealed trait Tr {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Tr {
    def decode(stream: XdrDataInputStream): Tr = OperationType.decode(stream) match {
      case OperationType.CREATE_ACCOUNT => CREATE_ACCOUNT(CreateAccountResult.decode(stream))
      case OperationType.PAYMENT => PAYMENT(PaymentResult.decode(stream))
      case OperationType.PATH_PAYMENT => PATH_PAYMENT(PathPaymentResult.decode(stream))
      case OperationType.MANAGE_OFFER => MANAGE_OFFER(ManageOfferResult.decode(stream))
      case OperationType.CREATE_PASSIVE_OFFER => CREATE_PASSIVE_OFFER(ManageOfferResult.decode(stream))
      case OperationType.SET_OPTIONS => SET_OPTIONS(SetOptionsResult.decode(stream))
      case OperationType.CHANGE_TRUST => CHANGE_TRUST(ChangeTrustResult.decode(stream))
      case OperationType.ALLOW_TRUST => ALLOW_TRUST(AllowTrustResult.decode(stream))
      case OperationType.ACCOUNT_MERGE => ACCOUNT_MERGE(AccountMergeResult.decode(stream))
      case OperationType.INFLATION => INFLATION(InflationResult.decode(stream))
      case OperationType.MANAGE_DATA => MANAGE_DATA(ManageDataResult.decode(stream))
      case OperationType.BUMP_SEQUENCE => BUMP_SEQUENCE(BumpSequenceResult.decode(stream))
      case d => throw new IllegalArgumentException(s"OperationType value $d is invalid")
    }

    case class CREATE_ACCOUNT(x: CreateAccountResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.CREATE_ACCOUNT.encode(stream)
        x.encode(stream)
      }
    }
    case class PAYMENT(x: PaymentResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.PAYMENT.encode(stream)
        x.encode(stream)
      }
    }
    case class PATH_PAYMENT(x: PathPaymentResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.PATH_PAYMENT.encode(stream)
        x.encode(stream)
      }
    }
    case class MANAGE_OFFER(x: ManageOfferResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.MANAGE_OFFER.encode(stream)
        x.encode(stream)
      }
    }
    case class CREATE_PASSIVE_OFFER(x: ManageOfferResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.CREATE_PASSIVE_OFFER.encode(stream)
        x.encode(stream)
      }
    }
    case class SET_OPTIONS(x: SetOptionsResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.SET_OPTIONS.encode(stream)
        x.encode(stream)
      }
    }
    case class CHANGE_TRUST(x: ChangeTrustResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.CHANGE_TRUST.encode(stream)
        x.encode(stream)
      }
    }
    case class ALLOW_TRUST(x: AllowTrustResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.ALLOW_TRUST.encode(stream)
        x.encode(stream)
      }
    }
    case class ACCOUNT_MERGE(x: AccountMergeResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.ACCOUNT_MERGE.encode(stream)
        x.encode(stream)
      }
    }
    case class INFLATION(x: InflationResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.INFLATION.encode(stream)
        x.encode(stream)
      }
    }
    case class MANAGE_DATA(x: ManageDataResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.MANAGE_DATA.encode(stream)
        x.encode(stream)
      }
    }
    case class BUMP_SEQUENCE(x: BumpSequenceResult) extends Tr {
      def encode(stream: XdrDataOutputStream): Unit = {
        OperationType.BUMP_SEQUENCE.encode(stream)
        x.encode(stream)
      }
    }
  }
}
