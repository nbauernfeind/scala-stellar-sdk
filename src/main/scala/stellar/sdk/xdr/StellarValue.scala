// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct StellarValue
//  {
//      Hash txSetHash;   // transaction set to apply to previous ledger
//      uint64 closeTime; // network close time
//  
//      // upgrades to apply to the previous ledger (usually empty)
//      // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
//      // unknown steps during consensus if needed.
//      // see notes below on 'LedgerUpgrade' for more detail
//      // max size is dictated by number of upgrade types (+ room for future)
//      UpgradeType upgrades<6>;
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================

case class StellarValue (
  txSetHash: Hash, 
  closeTime: Uint64, 
  upgrades: Array[UpgradeType], 
  ext: StellarValue.Ext
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    txSetHash.encode(stream)
    closeTime.encode(stream)
    stream.writeInt(upgrades.length)
    upgrades.foreach { _.encode(stream) }
    ext.encode(stream)
  }
}

object StellarValue {
  def decode(stream: XdrDataInputStream): StellarValue = StellarValue(
    Hash.decode(stream),
    Uint64.decode(stream),
    (0 until stream.readInt).map(_ => UpgradeType.decode(stream)).toArray,
    Ext.decode(stream)
  )

  sealed trait Ext {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ext {
    def decode(stream: XdrDataInputStream): Ext = stream.readInt match {
      case 0 => R_0
      case d => throw new IllegalArgumentException(s"Int value $d is invalid")
    }

    case object R_0 extends Ext {
      def encode(stream: XdrDataOutputStream): Unit = {
        stream.writeInt(0)
      }
    }
  }
}
