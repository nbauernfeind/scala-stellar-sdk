// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union Asset switch (AssetType type)
//  {
//  case ASSET_TYPE_NATIVE: // Not credit
//      void;
//  
//  case ASSET_TYPE_CREDIT_ALPHANUM4:
//      struct
//      {
//          opaque assetCode[4]; // 1 to 4 characters
//          AccountID issuer;
//      } alphaNum4;
//  
//  case ASSET_TYPE_CREDIT_ALPHANUM12:
//      struct
//      {
//          opaque assetCode[12]; // 5 to 12 characters
//          AccountID issuer;
//      } alphaNum12;
//  
//      // add other asset types here in the future
//  };

//  ===========================================================================

sealed trait Asset {
  def encode(stream: XdrDataOutputStream): Unit
}

object Asset {
  def decode(stream: XdrDataInputStream): Asset = AssetType.decode(stream) match {
    case AssetType.ASSET_TYPE_NATIVE => ASSET_TYPE_NATIVE
    case AssetType.ASSET_TYPE_CREDIT_ALPHANUM4 => ASSET_TYPE_CREDIT_ALPHANUM4(AlphaNum4.decode(stream))
    case AssetType.ASSET_TYPE_CREDIT_ALPHANUM12 => ASSET_TYPE_CREDIT_ALPHANUM12(AlphaNum12.decode(stream))
    case d => throw new IllegalArgumentException(s"AssetType value $d is invalid")
  }

  case object ASSET_TYPE_NATIVE extends Asset {
    def encode(stream: XdrDataOutputStream): Unit = {
      AssetType.ASSET_TYPE_NATIVE.encode(stream)
    }
  }
  case class ASSET_TYPE_CREDIT_ALPHANUM4(x: AlphaNum4) extends Asset {
    def encode(stream: XdrDataOutputStream): Unit = {
      AssetType.ASSET_TYPE_CREDIT_ALPHANUM4.encode(stream)
      x.encode(stream)
    }
  }
  case class ASSET_TYPE_CREDIT_ALPHANUM12(x: AlphaNum12) extends Asset {
    def encode(stream: XdrDataOutputStream): Unit = {
      AssetType.ASSET_TYPE_CREDIT_ALPHANUM12.encode(stream)
      x.encode(stream)
    }
  }

  case class AlphaNum4 (
    assetCode: Array[Byte], 
    issuer: AccountID
  ) {
    def encode(stream: XdrDataOutputStream): Unit = {
      stream.write(assetCode, 0, assetCode.length)
      issuer.encode(stream)
    }
  }

  object AlphaNum4 {
    def decode(stream: XdrDataInputStream): AlphaNum4 = AlphaNum4(
      stream.readBytes(4),
      AccountID.decode(stream)
    )
  }
  case class AlphaNum12 (
    assetCode: Array[Byte], 
    issuer: AccountID
  ) {
    def encode(stream: XdrDataOutputStream): Unit = {
      stream.write(assetCode, 0, assetCode.length)
      issuer.encode(stream)
    }
  }

  object AlphaNum12 {
    def decode(stream: XdrDataInputStream): AlphaNum12 = AlphaNum12(
      stream.readBytes(12),
      AccountID.decode(stream)
    )
  }
}
