// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct LedgerHeader
//  {
//      uint32 ledgerVersion;    // the protocol version of the ledger
//      Hash previousLedgerHash; // hash of the previous ledger header
//      StellarValue scpValue;   // what consensus agreed to
//      Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
//      Hash bucketListHash;     // hash of the ledger state
//  
//      uint32 ledgerSeq; // sequence number of this ledger
//  
//      int64 totalCoins; // total number of stroops in existence.
//                        // 10,000,000 stroops in 1 XLM
//  
//      int64 feePool;       // fees burned since last inflation run
//      uint32 inflationSeq; // inflation sequence number
//  
//      uint64 idPool; // last used global ID, used for generating objects
//  
//      uint32 baseFee;     // base fee per operation in stroops
//      uint32 baseReserve; // account base reserve in stroops
//  
//      uint32 maxTxSetSize; // maximum size a transaction set can be
//  
//      Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
//                        // in time without walking the chain back ledger by ledger
//                        // each slot contains the oldest ledger that is mod of
//                        // either 50  5000  50000 or 500000 depending on index
//                        // skipList[0] mod(50), skipList[1] mod(5000), etc
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================

case class LedgerHeader (
  ledgerVersion: Uint32, 
  previousLedgerHash: Hash, 
  scpValue: StellarValue, 
  txSetResultHash: Hash, 
  bucketListHash: Hash, 
  ledgerSeq: Uint32, 
  totalCoins: Int64, 
  feePool: Int64, 
  inflationSeq: Uint32, 
  idPool: Uint64, 
  baseFee: Uint32, 
  baseReserve: Uint32, 
  maxTxSetSize: Uint32, 
  skipList: Array[Hash], 
  ext: LedgerHeader.Ext
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    ledgerVersion.encode(stream)
    previousLedgerHash.encode(stream)
    scpValue.encode(stream)
    txSetResultHash.encode(stream)
    bucketListHash.encode(stream)
    ledgerSeq.encode(stream)
    totalCoins.encode(stream)
    feePool.encode(stream)
    inflationSeq.encode(stream)
    idPool.encode(stream)
    baseFee.encode(stream)
    baseReserve.encode(stream)
    maxTxSetSize.encode(stream)
    skipList.foreach { _.encode(stream) }
    ext.encode(stream)
  }
}

object LedgerHeader {
  def decode(stream: XdrDataInputStream): LedgerHeader = LedgerHeader(
    Uint32.decode(stream),
    Hash.decode(stream),
    StellarValue.decode(stream),
    Hash.decode(stream),
    Hash.decode(stream),
    Uint32.decode(stream),
    Int64.decode(stream),
    Int64.decode(stream),
    Uint32.decode(stream),
    Uint64.decode(stream),
    Uint32.decode(stream),
    Uint32.decode(stream),
    Uint32.decode(stream),
    (0 until 4).map(_ => Hash.decode(stream)).toArray,
    Ext.decode(stream)
  )

  sealed trait Ext {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ext {
    def decode(stream: XdrDataInputStream): Ext = stream.readInt match {
      case 0 => R_0
      case d => throw new IllegalArgumentException(s"Int value $d is invalid")
    }

    case object R_0 extends Ext {
      def encode(stream: XdrDataOutputStream): Unit = {
        stream.writeInt(0)
      }
    }
  }
}
