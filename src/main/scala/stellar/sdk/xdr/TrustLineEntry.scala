// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct TrustLineEntry
//  {
//      AccountID accountID; // account this trustline belongs to
//      Asset asset;         // type of asset (with issuer)
//      int64 balance;       // how much of this asset the user has.
//                           // Asset defines the unit for this;
//  
//      int64 limit;  // balance cannot be above this
//      uint32 flags; // see TrustLineFlags
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================

case class TrustLineEntry (
  accountID: AccountID, 
  asset: Asset, 
  balance: Int64, 
  limit: Int64, 
  flags: Uint32, 
  ext: TrustLineEntry.Ext
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    accountID.encode(stream)
    asset.encode(stream)
    balance.encode(stream)
    limit.encode(stream)
    flags.encode(stream)
    ext.encode(stream)
  }
}

object TrustLineEntry {
  def decode(stream: XdrDataInputStream): TrustLineEntry = TrustLineEntry(
    AccountID.decode(stream),
    Asset.decode(stream),
    Int64.decode(stream),
    Int64.decode(stream),
    Uint32.decode(stream),
    Ext.decode(stream)
  )

  sealed trait Ext {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ext {
    def decode(stream: XdrDataInputStream): Ext = stream.readInt match {
      case 0 => R_0
      case d => throw new IllegalArgumentException(s"Int value $d is invalid")
    }

    case object R_0 extends Ext {
      def encode(stream: XdrDataOutputStream): Unit = {
        stream.writeInt(0)
      }
    }
  }
}
