// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct TransactionSignaturePayload
//  {
//      Hash networkId;
//      union switch (EnvelopeType type)
//      {
//      case ENVELOPE_TYPE_TX:
//          Transaction tx;
//          /* All other values of type are invalid */
//      }
//      taggedTransaction;
//  };

//  ===========================================================================

case class TransactionSignaturePayload (
  networkId: Hash, 
  taggedTransaction: TransactionSignaturePayload.TaggedTransaction
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    networkId.encode(stream)
    taggedTransaction.encode(stream)
  }
}

object TransactionSignaturePayload {
  def decode(stream: XdrDataInputStream): TransactionSignaturePayload = TransactionSignaturePayload(
    Hash.decode(stream),
    TaggedTransaction.decode(stream)
  )

  sealed trait TaggedTransaction {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object TaggedTransaction {
    def decode(stream: XdrDataInputStream): TaggedTransaction = EnvelopeType.decode(stream) match {
      case EnvelopeType.ENVELOPE_TYPE_TX => ENVELOPE_TYPE_TX(Transaction.decode(stream))
      case d => throw new IllegalArgumentException(s"EnvelopeType value $d is invalid")
    }

    case class ENVELOPE_TYPE_TX(x: Transaction) extends TaggedTransaction {
      def encode(stream: XdrDataOutputStream): Unit = {
        EnvelopeType.ENVELOPE_TYPE_TX.encode(stream)
        x.encode(stream)
      }
    }
  }
}
