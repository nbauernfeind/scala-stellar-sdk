// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct LedgerEntry
//  {
//      uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
//  
//      union switch (LedgerEntryType type)
//      {
//      case ACCOUNT:
//          AccountEntry account;
//      case TRUSTLINE:
//          TrustLineEntry trustLine;
//      case OFFER:
//          OfferEntry offer;
//      case DATA:
//          DataEntry data;
//      }
//      data;
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================

case class LedgerEntry (
  lastModifiedLedgerSeq: Uint32, 
  data: LedgerEntry.Data, 
  ext: LedgerEntry.Ext
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    lastModifiedLedgerSeq.encode(stream)
    data.encode(stream)
    ext.encode(stream)
  }
}

object LedgerEntry {
  def decode(stream: XdrDataInputStream): LedgerEntry = LedgerEntry(
    Uint32.decode(stream),
    Data.decode(stream),
    Ext.decode(stream)
  )

  sealed trait Data {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Data {
    def decode(stream: XdrDataInputStream): Data = LedgerEntryType.decode(stream) match {
      case LedgerEntryType.ACCOUNT => ACCOUNT(AccountEntry.decode(stream))
      case LedgerEntryType.TRUSTLINE => TRUSTLINE(TrustLineEntry.decode(stream))
      case LedgerEntryType.OFFER => OFFER(OfferEntry.decode(stream))
      case LedgerEntryType.DATA => DATA(DataEntry.decode(stream))
      case d => throw new IllegalArgumentException(s"LedgerEntryType value $d is invalid")
    }

    case class ACCOUNT(x: AccountEntry) extends Data {
      def encode(stream: XdrDataOutputStream): Unit = {
        LedgerEntryType.ACCOUNT.encode(stream)
        x.encode(stream)
      }
    }
    case class TRUSTLINE(x: TrustLineEntry) extends Data {
      def encode(stream: XdrDataOutputStream): Unit = {
        LedgerEntryType.TRUSTLINE.encode(stream)
        x.encode(stream)
      }
    }
    case class OFFER(x: OfferEntry) extends Data {
      def encode(stream: XdrDataOutputStream): Unit = {
        LedgerEntryType.OFFER.encode(stream)
        x.encode(stream)
      }
    }
    case class DATA(x: DataEntry) extends Data {
      def encode(stream: XdrDataOutputStream): Unit = {
        LedgerEntryType.DATA.encode(stream)
        x.encode(stream)
      }
    }
  }
  sealed trait Ext {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ext {
    def decode(stream: XdrDataInputStream): Ext = stream.readInt match {
      case 0 => R_0
      case d => throw new IllegalArgumentException(s"Int value $d is invalid")
    }

    case object R_0 extends Ext {
      def encode(stream: XdrDataOutputStream): Unit = {
        stream.writeInt(0)
      }
    }
  }
}
