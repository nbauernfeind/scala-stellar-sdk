// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct LedgerHeaderHistoryEntry
//  {
//      Hash hash;
//      LedgerHeader header;
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================

case class LedgerHeaderHistoryEntry (
  hash: Hash, 
  header: LedgerHeader, 
  ext: LedgerHeaderHistoryEntry.Ext
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    hash.encode(stream)
    header.encode(stream)
    ext.encode(stream)
  }
}

object LedgerHeaderHistoryEntry {
  def decode(stream: XdrDataInputStream): LedgerHeaderHistoryEntry = LedgerHeaderHistoryEntry(
    Hash.decode(stream),
    LedgerHeader.decode(stream),
    Ext.decode(stream)
  )

  sealed trait Ext {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ext {
    def decode(stream: XdrDataInputStream): Ext = stream.readInt match {
      case 0 => R_0
      case d => throw new IllegalArgumentException(s"Int value $d is invalid")
    }

    case object R_0 extends Ext {
      def encode(stream: XdrDataOutputStream): Unit = {
        stream.writeInt(0)
      }
    }
  }
}
