// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct ManageOfferSuccessResult
//  {
//      // offers that got claimed while creating this offer
//      ClaimOfferAtom offersClaimed<>;
//  
//      union switch (ManageOfferEffect effect)
//      {
//      case MANAGE_OFFER_CREATED:
//      case MANAGE_OFFER_UPDATED:
//          OfferEntry offer;
//      default:
//          void;
//      }
//      offer;
//  };

//  ===========================================================================

case class ManageOfferSuccessResult (
  offersClaimed: Array[ClaimOfferAtom], 
  offer: ManageOfferSuccessResult.Offer
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    stream.writeInt(offersClaimed.length)
    offersClaimed.foreach { _.encode(stream) }
    offer.encode(stream)
  }
}

object ManageOfferSuccessResult {
  def decode(stream: XdrDataInputStream): ManageOfferSuccessResult = ManageOfferSuccessResult(
    (0 until stream.readInt).map(_ => ClaimOfferAtom.decode(stream)).toArray,
    Offer.decode(stream)
  )

  sealed trait Offer {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Offer {
    def decode(stream: XdrDataInputStream): Offer = ManageOfferEffect.decode(stream) match {
      case ManageOfferEffect.MANAGE_OFFER_CREATED => MANAGE_OFFER_CREATED(OfferEntry.decode(stream))
      case ManageOfferEffect.MANAGE_OFFER_UPDATED => MANAGE_OFFER_UPDATED(OfferEntry.decode(stream))
      case d => Default(d)
    }

    case class MANAGE_OFFER_CREATED(x: OfferEntry) extends Offer {
      def encode(stream: XdrDataOutputStream): Unit = {
        ManageOfferEffect.MANAGE_OFFER_CREATED.encode(stream)
        x.encode(stream)
      }
    }
    case class MANAGE_OFFER_UPDATED(x: OfferEntry) extends Offer {
      def encode(stream: XdrDataOutputStream): Unit = {
        ManageOfferEffect.MANAGE_OFFER_UPDATED.encode(stream)
        x.encode(stream)
      }
    }
    case class Default(d: ManageOfferEffect) extends Offer {
      def encode(stream: XdrDataOutputStream): Unit = {
        d.encode(stream)
      }
    }
  }
}
