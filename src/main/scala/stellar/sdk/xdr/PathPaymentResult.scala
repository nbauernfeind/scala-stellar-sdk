// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  union PathPaymentResult switch (PathPaymentResultCode code)
//  {
//  case PATH_PAYMENT_SUCCESS:
//      struct
//      {
//          ClaimOfferAtom offers<>;
//          SimplePaymentResult last;
//      } success;
//  case PATH_PAYMENT_NO_ISSUER:
//      Asset noIssuer; // the asset that caused the error
//  default:
//      void;
//  };

//  ===========================================================================

sealed trait PathPaymentResult {
  def encode(stream: XdrDataOutputStream): Unit
}

object PathPaymentResult {
  def decode(stream: XdrDataInputStream): PathPaymentResult = PathPaymentResultCode.decode(stream) match {
    case PathPaymentResultCode.PATH_PAYMENT_SUCCESS => PATH_PAYMENT_SUCCESS(Success.decode(stream))
    case PathPaymentResultCode.PATH_PAYMENT_NO_ISSUER => PATH_PAYMENT_NO_ISSUER(Asset.decode(stream))
    case d => Default(d)
  }

  case class PATH_PAYMENT_SUCCESS(x: Success) extends PathPaymentResult {
    def encode(stream: XdrDataOutputStream): Unit = {
      PathPaymentResultCode.PATH_PAYMENT_SUCCESS.encode(stream)
      x.encode(stream)
    }
  }
  case class PATH_PAYMENT_NO_ISSUER(x: Asset) extends PathPaymentResult {
    def encode(stream: XdrDataOutputStream): Unit = {
      PathPaymentResultCode.PATH_PAYMENT_NO_ISSUER.encode(stream)
      x.encode(stream)
    }
  }
  case class Default(d: PathPaymentResultCode) extends PathPaymentResult {
    def encode(stream: XdrDataOutputStream): Unit = {
      d.encode(stream)
    }
  }

  case class Success (
    offers: Array[ClaimOfferAtom], 
    last: SimplePaymentResult
  ) {
    def encode(stream: XdrDataOutputStream): Unit = {
      stream.writeInt(offers.length)
      offers.foreach { _.encode(stream) }
      last.encode(stream)
    }
  }

  object Success {
    def decode(stream: XdrDataInputStream): Success = Success(
      (0 until stream.readInt).map(_ => ClaimOfferAtom.decode(stream)).toArray,
      SimplePaymentResult.decode(stream)
    )
  }
}
