// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package stellar.sdk.xdr

import stellar.sdk.xdr._

// === xdr source ============================================================

//  struct PeerAddress
//  {
//      union switch (IPAddrType type)
//      {
//      case IPv4:
//          opaque ipv4[4];
//      case IPv6:
//          opaque ipv6[16];
//      }
//      ip;
//      uint32 port;
//      uint32 numFailures;
//  };

//  ===========================================================================

case class PeerAddress (
  ip: PeerAddress.Ip, 
  port: Uint32, 
  numFailures: Uint32
) {
  def encode(stream: XdrDataOutputStream): Unit = {
    ip.encode(stream)
    port.encode(stream)
    numFailures.encode(stream)
  }
}

object PeerAddress {
  def decode(stream: XdrDataInputStream): PeerAddress = PeerAddress(
    Ip.decode(stream),
    Uint32.decode(stream),
    Uint32.decode(stream)
  )

  sealed trait Ip {
    def encode(stream: XdrDataOutputStream): Unit
  }

  object Ip {
    def decode(stream: XdrDataInputStream): Ip = IPAddrType.decode(stream) match {
      case IPAddrType.IPv4 => IPv4(stream.readBytes(4))
      case IPAddrType.IPv6 => IPv6(stream.readBytes(16))
      case d => throw new IllegalArgumentException(s"IPAddrType value $d is invalid")
    }

    case class IPv4(x: Array[Byte]) extends Ip {
      def encode(stream: XdrDataOutputStream): Unit = {
        IPAddrType.IPv4.encode(stream)
        stream.write(x, 0, x.length)
      }
    }
    case class IPv6(x: Array[Byte]) extends Ip {
      def encode(stream: XdrDataOutputStream): Unit = {
        IPAddrType.IPv6.encode(stream)
        stream.write(x, 0, x.length)
      }
    }
  }
}
